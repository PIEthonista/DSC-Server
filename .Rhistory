plot + scale_colour_brewer(palette="Set1") + coord_polar()
#  scale_x_continuous(breaks=seq(0,100,1), ) +
library(ggplot2)
library(plotrix)
df = data.frame(
status = c("Solved","Open","Reopenend","Deleted","Unassigned","Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
scale_y_continuous(breaks=0:nlevels(df$status), labels=sprintf("%2.1%%",seq(0,100,0.1))) +
theme_gray() +
labs(title="Ticket Status vs Percentage", subtitle="From salimah's data") +
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
text = element_text(size=10),
axis.title = element_blank(),
axis.line = element_blank(),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1))
plot + scale_colour_brewer(palette="Set4") + coord_polar()
#  scale_x_continuous(breaks=seq(0,100,1), ) +
library(ggplot2)
library(plotrix)
df = data.frame(
status = c("Solved","Open","Reopenend","Deleted","Unassigned","Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
scale_y_continuous(breaks=0:nlevels(df$status), labels=sprintf("%2.1%%",seq(0,100,0.1))) +
theme_gray() +
labs(title="Ticket Status vs Percentage", subtitle="") +
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
text = element_text(size=10),
axis.title = element_blank(),
axis.line = element_blank(),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1))
plot + scale_colour_brewer(palette="Set4") + coord_polar()
#  scale_x_continuous(breaks=seq(0,100,1), ) +
library(ggplot2)
library(plotrix)
df = data.frame(
status = c("Solved","Open","Reopenend","Deleted","Unassigned","Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
scale_y_continuous(breaks=0:nlevels(df$status), labels=sprintf("%2.1%%",seq(0,100,0.1))) +
theme_gray() +
labs(title="Ticket Status vs Percentage", subtitle="") +
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
text = element_text(size=10),
axis.title = element_blank(),
axis.line = element_blank(),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1))
plot + coord_polar()
library(ggplot2)
library(plotrix)
df = data.frame(
status = c("Solved","Open","Reopenend","Deleted","Unassigned","Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
scale_y_continuous(breaks=0:nlevels(df$status)) +
theme_gray() +
labs(title="Ticket Status vs Percentage", subtitle="") +
theme(axis.ticks = element_blank(),
axis.text = element_blank(),
text = element_text(size=10),
axis.title = element_blank(),
axis.line = element_blank(),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1))
plot + coord_polar()
#  scale_x_continuous(breaks=seq(0,100,1), ) +
#plot + scale_colour_brewer(palette="Set4") + coord_polar()
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
scale_y_continuous(breaks=0:nlevels(df$status)) +
theme_gray() +
labs(title="Ticket Status vs Percentage", subtitle="")
library(ggplot2)
library(plotrix)
df = data.frame(
status = c("Solved","Open","Reopenend","Deleted","Unassigned","Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
scale_y_continuous(breaks=0:nlevels(df$status)) +
theme_gray() +
labs(title="Ticket Status vs Percentage", subtitle="")
plot + coord_polar()
#  scale_x_continuous(breaks=seq(0,100,1), ) +
#plot + scale_colour_brewer(palette="Set4") + coord_polar()
library(ggplot2)
library(plotrix)
df = data.frame(
status = c("Solved","Open","Reopenend","Deleted","Unassigned","Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
scale_y_continuous(breaks=0:nlevels(df$status)) +
theme_gray() +
theme(axis.ticks = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1)) +
labs(title="Ticket Status vs Percentage", subtitle="")
plot + coord_polar()
#  scale_x_continuous(breaks=seq(0,100,1), ) +
#plot + scale_colour_brewer(palette="Set4") + coord_polar()
library(ggplot2)
library(plotrix)
df = data.frame(
status = c("Solved","Open","Reopenend","Deleted","Unassigned","Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
scale_y_continuous(breaks=0:nlevels(df$status), labels=sprintf("%2.1f%%", seq(0,100,0.1))) +
theme_gray() +
theme(axis.ticks = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1)) +
labs(title="Ticket Status vs Percentage", subtitle="")
plot + coord_polar()
#  scale_x_continuous(breaks=seq(0,100,1), ) +
#plot + scale_colour_brewer(palette="Set4") + coord_polar()
library(ggplot2)
library(plotrix)
df = data.frame(
status = c("Solved","Open","Reopenend","Deleted","Unassigned","Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
scale_y_continuous(breaks=0:nlevels(df$status)) +
theme_gray() +
theme(axis.ticks = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1)) +
labs(title="Ticket Status vs Percentage", subtitle="")
plot + coord_polar()
#  scale_x_continuous(breaks=seq(0,100,1), ) +
#plot + scale_colour_brewer(palette="Set4") + coord_polar()
library(ggplot2)
library(plotrix)
df = data.frame(
status = c("Solved","Open","Reopenend","Deleted","Unassigned","Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
scale_y_continuous(breaks=0:nlevels(df$status)) +
theme_gray() +
theme(
text = element_text(size=10),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1)) +
labs(title="Ticket Status vs Percentage", subtitle="")
plot + coord_polar()
#  scale_x_continuous(breaks=seq(0,100,1), ) +
#plot + scale_colour_brewer(palette="Set4") + coord_polar()
library(ggplot2)
library(plotrix)
df = data.frame(
status = c("Solved","Open","Reopenend","Deleted","Unassigned","Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
theme_gray() +
theme(axis.ticks = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1)) +
labs(title="Ticket Status vs Percentage", subtitle="")
plot + coord_polar()
library(ggplot2)
library(plotrix)
df = data.frame(
status = c("Solved","Open","Reopenend","Deleted","Unassigned","Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
scale_y_continuous(breaks=0:nlevels(df$status)) +
theme_gray() +
theme(axis.ticks = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1)) +
labs(title="Ticket Status vs Percentage", subtitle="")
plot + coord_polar()
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
theme_gray() +
theme(axis.ticks = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1)) +
labs(title="Ticket Status vs Percentage", subtitle="")
plot + coord_polar()
library(ggplot2)
library(plotrix)
df = data.frame(
status = c("Solved","Open","Reopenend","Deleted","Unassigned","Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
theme_gray() +
theme(axis.ticks = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1)) +
labs(title="Ticket Status vs Percentage", subtitle="", y="Percentage %", x="Ticket Status")
plot + coord_polar()
library(ggplot2)
library(plotrix)
df = data.frame(
status = c("Solved","Open","Reopenend","Deleted","Unassigned","Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
theme_gray() +
theme(axis.ticks = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1)) +
labs(title="Ticket Status vs Percentage", subtitle="", y="Percentage %", x="Ticket Status")
plot + coord_polar()
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
theme_gray() +
theme(axis.ticks = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1)) +
labs(title="Ticket Status vs Percentage", subtitle="", y="Percentage %", x="Ticket Status")
library(ggplot2)
library(plotrix)
df = data.frame(
status = c("Solved","Open","Reopenend","Deleted","Unassigned","Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
theme_gray() +
theme(axis.ticks = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1)) +
labs(title="Ticket Status vs Percentage", subtitle="", y="Percentage %", x="Ticket Status")
plot + coord_polar()
library(ggplot2)
library(plotrix)
df = data.frame(
status = c("Solved","Open","Reopenend","Deleted","Unassigned","Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "white") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
theme_gray() +
theme(axis.ticks = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1)) +
labs(title="Ticket Status vs Percentage", subtitle="", y="Percentage %", x="Ticket Status")
plot + coord_polar()
library(ggplot2)
library(plotrix)
df = data.frame(
status = c("Solved","Open","Reopenend","Deleted","Unassigned","Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "black") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
theme_gray() +
theme(axis.ticks = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1)) +
labs(title="Ticket Status vs Percentage", subtitle="", y="Percentage %", x="Ticket Status")
plot + coord_polar()
library(ggplot2)
library(plotrix)
df = data.frame(
status = c("Solved","Open","Reopenend","Deleted","Unassigned","Escalated"),
percentage = c(45.5, 39.5, 6.5, 2.6, 2.0, 3.9)
)
plot <- ggplot(df, aes(status, percentage, fill = status)) +
geom_bar(width = 1, stat = "identity", color = "black") +
geom_errorbar(aes(ymin = percentage - std.error(percentage),
ymax = percentage + std.error(percentage),
color = status),
width = .3) +
theme_gray() +
theme(axis.ticks = element_blank(),
text = element_text(size=10),
axis.text.x = element_text(angle=0, vjust = 1, hjust=1)) +
labs(title="Ticket Status vs Percentage", subtitle="", y="Percentage %", x="Ticket Status")
plot + coord_polar()
library(swirl)
swirl::install_course("Statistical Inference")
swirl()
library(readr)
library(dplyr)
library(readr)
library(dplyr)
Df = read.csv("/Users/gohyixian/Downloads/imdb_top_1000.csv") %>%
select(Certificate) %>%
distinct()
Df
Df
shiny::runApp('Documents/GitHub/DSC-UI')
library(dplyr)
library(stringr)
library(png)
library(shinyjs)
library(visNetwork)
library(rintrojs)
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(readxl)
library(readr)
library(shinydashboard)
library(shinydisconnect)
library(DT)
library(tibble)
mydata <- data.frame(read.csv("https://raw.githubusercontent.com/PIEthonista/DSC-Data-Hosting/main/imdb_top_1000.csv"))
displaydata <- mydata[-c(1,4,9,15,16)]
#filter out drama data set
dramavalidity <- data.frame(str_detect(displaydata$Genre, "Drama"))
dramafilter <- cbind(displaydata, drama = dramavalidity[,1])
drama <- dramafilter[!(dramafilter$drama=="FALSE"),]
dramaa <- drama[,-12]
#filter out movie data set
movie <- dramafilter[!(dramafilter$drama=="TRUE"),]
moviee <- movie [,-12]
runApp('Documents/GitHub/DSC-UI')
runApp('Documents/GitHub/DSC-UI')
Df = read.csv("/Users/gohyixian/Downloads/imdb_top_1000.csv") %>%
select(Certificate) %>%
distinct()
Df
library(readr)
library(dplyr)
Df = read.csv("/Users/gohyixian/Downloads/imdb_top_1000.csv") %>%
select(Certificate) %>%
distinct()
Df
library(readr)
library(dplyr)
Df = read.csv("/Users/gohyixian/Downloads/imdb_top_1000.csv") %>%
select(Certificate) %>%
distinct()
Df
library(readr)
library(dplyr)
Df = read.csv("/Users/gohyixian/Downloads/imdb_top_1000.csv") %>%
select(Certificate) %>%
distinct()
Df
library(dplyr)
Df = read.csv("/Users/gohyixian/Downloads/imdb_top_1000.csv") %>%
select(Certificate) %>%
distinct()
Df = read.csv("/Users/gohyixian/Downloads/imdb_top_1000.csv") %>%
select(Certificate) %>%
distinct()
Df = read.csv("/Users/gohyixian/Downloads/imdb_top_1000.csv") %>%
select(Certificate) %>%
distinct()
library(readr)
library(dplyr)
Df = read.csv("/Users/gohyixian/Downloads/imdb_top_1000.csv") %>%
select(Certificate) %>%
distinct()
Df
shiny::runApp('Documents/GitHub/DSC-UI')
runApp('Documents/GitHub/DSC-UI')
runApp('Documents/GitHub/DSC-UI')
runApp('Documents/GitHub/DSC-UI')
shiny::runApp('Documents/rprojects/Shiny/counter')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
shiny::runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
# import the required library
library(dplyr)
library(stringr)
library(png)
library(shinyjs)
library(visNetwork)
library(rintrojs)
library(shiny)
library(shinythemes)
library(shinyWidgets)
library(readxl)
library(readr)
library(shinydashboard)
library(shinydisconnect)
library(DT)
library(tibble)
# read the data set
#mydata <- data.frame(read.csv("imdb_top_1000.csv"))
mydata <- data.frame(read.csv("https://raw.githubusercontent.com/PIEthonista/DSC-Data-Hosting/main/imdb_top_1000.csv"))
# filter data and get the important points needed for customer
# displaydata <- mydata[-c(1,4,9,15,16)]
displaydata <- mydata[-c(1,9,15,16)]
#filter out drama data set
dramavalidity <- data.frame(str_detect(displaydata$Genre, "Drama"))
dramafilter <- cbind(displaydata, drama = dramavalidity[,1])
drama <- dramafilter[!(dramafilter$drama=="FALSE"),]
dramaa <- drama[,-12]
#filter out movie data set
movie <- dramafilter[!(dramafilter$drama=="TRUE"),]
moviee <- movie [,-12]
View(moviee)
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp()
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp()
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
runApp('Documents/GitHub/DSC-Server')
